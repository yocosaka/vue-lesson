- Instead of using options API, we use composition API
- In composition API, we can group variables and functions together in setup()
- setup() method is invoked very first even before calling created() and mounted()
- In setup(), we can define functions and variable and to use them in template, we need to export them
- the difference between variable in data() method and in setup() method is that variable in data() is reactive
- In options API, we can simply use ref using this keyword like this.$ref
- In composition API, how to use ref is a little complex
  1. import ref from vur in script
  2. declare variable name of ref in setup() and call ref passing null as a default value
  3. export it from setup()
  4. use it in template using ref attribute keyword and set it like ref="vaiableName"
  5. use the ref variable to reference it inside the event handler method that are called only after all the dom are rednered


How to create reactive variable in composition API?
There are tro ways to create reactve variable in compostion API instead of using data() method
: using ref or reactive

A. Using ref

  1. import ref from vue
  2. in setup(), declare variable and set the ref() method passing default value
  e.g:  const person = ref({name: 'mario', age: 30})
  3. use it like  {{ person.name }} in template like normal reactive varible in data() of options API
  4. to update, you can simply say using .value
  e.g: person.value.name = luigi

B. Using reactive

 1. import reactive from vue
  2. in setup(), declare variable and set the reactive() method passing default value
  e.g:  const person = reactive({name: 'mario', age: 30})
  3. use it like  {{ person.name }} in template like normal reactive varible in data() of options API
  4. to update, you can simply say without using .value <= this is one of differences from ref
  e.g: person.name = luigi

===> Which should we use? Netninja recommend we use Ref
Why?:
we cannot use primitive values inside reactive
eg: OK with ref
const name = ref('mario')

we cannot create primitive reactive variable using reactive
